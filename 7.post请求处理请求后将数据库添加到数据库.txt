在本目录下第4的时候用的是get请求，用的都是假数据，可以存到数据库，现在使用post请求，早postman中输入数据，发现在post请求中拿不到req.body。可能在react、vue项目中这些框架给我们自动处理了，但是现在使用原生的node就需要自己来处理。这时候就要使用到中间件了：在根目录下创建middle_wares/body_parser.js:
import querystring from 'querystring'
// 处理post请求
export default (req, res, next)=>{
    // 1. 过滤get请求
    if(req.method.toLowerCase() === 'get'){
        return next();
    }

    // console.log(req.headers['content-type']);

    // 2. 如果是普通的表单提交, 要处理 , application/x-www-form-urlencoded
    // 如果有文件(图片,音视频, ...), 不要处理,  multipart/form-data，交给formidable处理。
    if(req.headers['content-type'].startsWith('multipart/form-data')){
        return next();
    }

    // 3. 数据流的拼接
    let data = '';
    req.on('data', (chunk)=>{
        data += chunk;
    });
    req.on('end', ()=>{
        // console.log(data);
        req.body = querystring.parse(data);
        next();
    });
}
如果是get请求就放行，如果请求头的请求类型包含了multipart/form-data放行，除这两种情况外，其他的都要处理，就拼接数据流，先是监听data的变化，如果监听到响应结束，就给客户端返回。最终要全局配置中间件。在app.js中先引入，接着app.use(),放在路由的前面。最后就是在post中拿到数据插入数据库：
router.post('/sowing/api/add', (req, res)=>{
    // 1. 获取数据
    const body = req.body;

    // 操作数据库
    const sowing = new Sowing({
        // 图片名称
        image_title: body.image_title,
        // 图片地址
        image_url: body.image_url,
        // 跳转链接
        image_link: body.image_link,
        // 上架时间
        s_time: body.s_time,
        // 下架时间
        e_time: body.e_time,
    });

    sowing.save((err, result)=>{
        if(err){
           return next(err);
        }
        res.json({
            status: 200,
            result: '添加轮播图成功'
        })
    });
});



























