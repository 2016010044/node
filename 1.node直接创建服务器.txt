const http=require("http")

let server=http.createServer((req,res)=>{
res.end("11")
}).listen("3000","127.0.0.1",()=>{
console.log("服务器已经启动了")
})
//监听服务器关闭：
server.on('close',function(){
    console.log('服务器关闭');
});
超时：
server.setTimeout(1000, ()=>{
    console.log('设置超时时间为1s');
});
server.on('timeout',function(){
    console.log('连接已经超时');
});
错误：
server.on('error', (e)=>{
    if(e.code === 'EADDRINUSE'){
        console.log('端口号被调用!');
    }else {
        console.log('其它的错误', e.code);
    }
});
补充：
querystring.parse() 方法将 URL 查询字符串 str 解析为键值对的集合。

        例如，查询字符串 'foo=bar&abc=xyz&abc=123' 会被解析为：

        {
  foo: 'bar',
  abc: ['xyz', '123']
}

通过不同请求来切换路由：
const http = require('http');
const url = require('url');
const fs = require('fs');
const path = require('path');

// 创建服务器
http.createServer((req, res) => {
    // 1. 获取url的路径
    let pathUrl = url.parse(req.url);
    let pathName = pathUrl.pathname;
    console.log(pathName);

    // 2. 判断
    if ('/like' === pathName) {
        fs.readFile(path.join(__dirname, 'page/page1.html'), (err, data)=>{
            if(err) throw err;
            res.writeHead(200, {'content-type': 'text/html;charset=utf-8'});
            res.end(data);
        });
    }else if('/page2' === pathName){
        fs.readFile(path.join(__dirname, 'page/page2.html'), (err, data)=>{
            if(err) throw err;
            res.writeHead(200, {'content-type': 'text/html;charset=utf-8'});
            res.end(data);
        });
    }else if('/css' === pathName){
        fs.readFile(path.join(__dirname, 'page/index.css'), (err, data)=>{
            if(err) throw err;
            res.writeHead(200, {'content-type': 'text/css;charset=utf-8'});
            res.end(data);
        });
    }else if('/img' === pathName){
        fs.readFile(path.join(__dirname, 'page/img2.jpg'), (err, data)=>{
            if(err) throw err;
            res.writeHead(200, {'content-type': 'image/jpg'});
            res.end(data);
        });
    }else {
        res.writeHead(404, {'content-type': 'text/html;charset=utf-8'});
        res.end('<h1>404, 当前的页面不存在!</h1>');
    }
}).listen(3000,"127.0.0.1",()=>{});

补充：取文件的全路径：let pathUrl=path.join(__dirname,"text.html")
取后缀： let extname=path.extname( pathUrl)
以上就是直接搭建服务器，然后通过在地址栏中的输入的url来切换请求，最终得到不同的数据。

















