1.为什么使用express：nodejs提供了的方法处理起来比较麻烦，在使用nodejs时有很多现成的框架帮助开发人员，其中最简单的一个server框架就是Express。
2.什么是express：
Express.js 框架是目前最流行的node.js后端框架之一,  相当于jQuery和js之间的关系;
Express 不对 Node.js 已有的特性进行二次抽象，我们只是在它之上扩展了 Web 应用所需的基本功能;
3.使用方法：此处不再介绍，因为在react项目中已经详细的介绍了。
4.补充一下res.end()和res.send的区别：
简单来说就是 如果服务器端没有数据返回到客户端 那么就可以用 res.end， 但是 如果 服务器端有数据返回到客户端 这个时候必须用res.send ,不能用 res.end（会报错） 。官方说明：
res.end() 终结响应处理流程。
res.send() 发送各种类型的响应。
1）res.end（[data] [，encoding]）**
结束响应过程。用于在没有任何数据的情况下快速结束响应。如果需要响应数据，请使用res.send（）和res.json（）等方法。
5.中间件：
1）概念：一个中间件是一个用于处理客户端请求（http请求）的函数。（一次Http请求的环节通常包含很多工作，如记录日志、ip过滤、查询字符串、请求体解析、Cookie处理、权限验证、参数验证、异常处理等），所以一个HTTP服务器中可能会使用到各种中间件，当接收到一个客户端请求时，首先将该请求提交给第一个中间件函数。举个例子，假设请求的url为：localhost://3000/test,服务器接收到请求提交给中间件：
app.get(use or post)("/test",(req,res,next)=>{
res.send("我是来自localhost://3000/test的请求")；
next();
})
在express的use中使用next()可以放行中间件，执行下一条匹配的路由(说的是请求依然为：localhost://3000/test，还存在app.get(use or post)("/test",(req,res,next)=>{.....这样的代码)，需要注意的是，响应只能响应一次 后面的所有响应都没有效果了，如果在第一次匹配的路由做了响应，那么后面路由中的响应不会生效，但是其它代码依旧可以执行。
2）分类：
use('请求路径',  (req, res, next)=>{})
get('请求路径', (req, res, next)=>{})
post('请求路径', function (req, res, next) {})








































